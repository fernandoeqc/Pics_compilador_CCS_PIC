CCS PCM C Compiler, Version 5.015, 5967               23-mai-20 20:53

               Filename:   C:\Users\ferna\OneDrive\Documentos\ProjetosGit\Pics\blink.lst

               ROM used:   60 words (3%)
                           Largest free fragment is 1988
               RAM used:   6 (5%) at main() level
                           22 (17%) worst case
               Stack used: 1 locations
               Stack size: 16

*
0000:  MOVLP  00
0001:  GOTO   019
0002:  NOP
.................... #include <blink.h> 
.................... #include <12F1822.h> 
.................... //////////// Standard Header file for the PIC12F1822 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC12F1822 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOMCLR                	//Master Clear pin used for I/O 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(internal=4000000) 
0003:  MOVLW  20
0004:  MOVWF  05
0005:  MOVLW  06
0006:  MOVWF  04
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  21
000C:  CLRF   20
000D:  DECFSZ 20,F
000E:  GOTO   00D
000F:  DECFSZ 21,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  20
0013:  DECFSZ 20,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
....................  
.................... #define LED PIN_A0 
.................... #define DELAY 1000 
....................  
....................  
....................  
....................  
.................... void main() 
0019:  MOVLW  6A
001A:  MOVLB  01
001B:  MOVWF  19
001C:  MOVLB  03
001D:  CLRF   0C
001E:  MOVLB  02
001F:  CLRF   12
0020:  CLRF   11
.................... { 
....................  
.................... 	//Example blinking LED program 
.................... 	while(true) 
.................... 	{ 
.................... 		output_low(LED); 
0021:  MOVLB  01
0022:  BCF    0C.0
0023:  MOVLB  02
0024:  BCF    0C.0
.................... 		delay_ms(DELAY); 
0025:  MOVLW  04
0026:  MOVLB  00
0027:  MOVWF  25
0028:  MOVLW  FA
0029:  MOVWF  26
002A:  CALL   003
002B:  DECFSZ 25,F
002C:  GOTO   028
.................... 		output_high(LED); 
002D:  MOVLB  01
002E:  BCF    0C.0
002F:  MOVLB  02
0030:  BSF    0C.0
.................... 		delay_ms(DELAY); 
0031:  MOVLW  04
0032:  MOVLB  00
0033:  MOVWF  25
0034:  MOVLW  FA
0035:  MOVWF  26
0036:  CALL   003
0037:  DECFSZ 25,F
0038:  GOTO   034
0039:  MOVLB  02
003A:  GOTO   021
.................... 	} 
....................  
.................... } 
003B:  SLEEP

Configuration Fuses:
   Word  1: 3984   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD NOBROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT PLL_SW STVREN BORV19 NODEBUG NOLVP
